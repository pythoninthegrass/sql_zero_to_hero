# version: '3'

services:
  app:
    image: python:3.11.9-slim-bookworm
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-udemy
    hostname: python-udemy
    volumes:
      - .:/app
    working_dir: /app
    env_file:
      - .env
    environment:
      - DB_URL=db
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "sleep infinity"
    # command: ["python", "main.py"]

  db:
    image: postgres:16.4-alpine3.20
    build:
      context: .
      dockerfile: Dockerfile.pg
    container_name: postgres-udemy
    hostname: postgres-udemy
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db:/backup
      # - ./bin/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./bin/init_db.sh:/init_db.sh
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: |-
      bash -c "
        docker-entrypoint.sh postgres -c listen_addresses='*' &
        until pg_isready -U ${DB_USER:-postgres}; do
          echo 'Waiting for PostgreSQL to become available...'
          sleep 1
        done
        echo 'PostgreSQL is available. Running init_db.sh...'
        bash /init_db.sh --drop
        echo 'Initialization complete. Keeping PostgreSQL running...'
        wait
      "

volumes:
  pgdata:
